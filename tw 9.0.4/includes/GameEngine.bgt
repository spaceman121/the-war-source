library engine;
string load_engine()
{
//Load the game engine. Must call on start of your script. This function also returns the engine version.
engine.load("GameEngine.dll");
return game_engine_version();
}
string game_engine_version()
{
//A standalone function to get the game engine version.
dictionary d=engine.call("int get_ver1();");
int e=-1;
d.get("0",e);
d=engine.call("int get_ver2();");
int f=-1;
d.get("0",f);
d=engine.call("int get_ver3();");
int g=-1;
d.get("0",g);
d=engine.call("int get_ver4();");
int h=-1;
d.get("0",h);
return e+"."+f+"."+g+"."+h;
}
void spawn_platform(int minx, int maxx, int miny, int maxy, string type)
{
//Spawn a 2D platform.
engine.call("void spawn_platform2D(int,int,int,int,char*);",minx,maxx,miny,maxy,type);
}
void spawn_platform(int minx, int maxx, int miny, int maxy, int minz, int maxz, string type)
{
//Spawn a 3D platform.
engine.call("void spawn_platform3D(int,int,int,int,int,int,char*);",minx,maxx,miny,maxy,minz,maxz,type);
}
void spawn_zone(int minx, int maxx, int miny, int maxy, string text)
{
//spawn a 2D zone.
engine.call("void spawn_zone2D(int,int,int,int,char*);",minx,maxx,miny,maxy,text);
}
void spawn_zone(int minx, int maxx, int miny, int maxy, int minz, int maxz, string text)
{
//spawn a 3D zzone.
engine.call("void spawn_zone3D(int,int,int,int,int,int,char*);",minx,maxx,miny,maxy,minz,maxz,text);
}
string get_tile_at(int x, int y)
{
//Returns the name of the tile at the specified coordinates. Use with a 2D map.
dictionary@ d=engine.call("char* get_tile_at2D(int, int);",x,y);
int e=-1;
d.get("0",e);
string tile=string_create_from_pointer(e, 0);
return tile;
}
string get_tile_at(int x, int y, int z)
{
//Returns the name of the tile at the specified coordinates. Use with a 3D map.
dictionary@ d=engine.call("char* get_tile_at3D(int, int,int);",x,y,z);
int e=-1;
d.get("0",e);
string tile=string_create_from_pointer(e, 0);
return tile;
}
string get_zone_at(int x, int y)
{
//Returns the name of the zone at the specified coordinates. Use with a 2D map.
dictionary@ d=engine.call("char* get_zone_at2D(int, int);",x,y);
int e=-1;
d.get("0",e);
string tile=string_create_from_pointer(e, 0);
return tile;
}
string get_zone_at(int x, int y, int z)
{
//Returns the name of the zone at the specified coordinates. Use with a 3D map.
dictionary@ d=engine.call("char* get_zone_at3D(int, int,int);",x,y,z);
int e=-1;
d.get("0",e);
string tile=string_create_from_pointer(e, 0);
return tile;
}
void import_map(string mapdata)
{
//Imports map data from a string.
engine.call("void import_map(char* mapdata);",mapdata);
}
string export_map()
{
//Exports the map into plaintext for saving.
dictionary@ d=engine.call("char* export_map();");
int e=-1;
d.get("0",e);
string data=string_create_from_pointer(e, 0);
return data;
}
string export_zones()
{
//Exports the map zone data into plaintext for saving.
dictionary@ d=engine.call("char* export_zones();");
int e=-1;
d.get("0",e);
string data=string_create_from_pointer(e, 0);
return data;
}
void clear_map()
{
//resets the map to empty.
engine.call("void clear_map();");
}
void clear_zones()
{
//resets the zones to empty.
engine.call("void clear_zones();");
}
int map_length()
{
//Get the map size.
dictionary d=engine.call("int map_length();");
int e=-1;
d.get("0",e);
return e;
}
int zones_length()
{
//Get the zones size.
dictionary d=engine.call("int zones_length();");
int e=-1;
d.get("0",e);
return e;
}
//recording functions
void start_recording_audio()
{
//Begins recording audio from the default sound card.
engine.call("void start_recording_audio();");
}
void stop_recording_audio(string filename)
{
//stops recording audio and saves the result as a wav file.
int convert=0;
engine.call("void stop_recording_audio(int, char*);",convert,filename);
}

//network controls
void download_file(string url)
{
//Downloads a file.
engine.call("void download_file(char*);",url);
}
void download_file_as(string url, string filename)
{
//Downloads a file with a custom filename.
engine.call("void download_file_as(char*, char*);",url,filename);
}
string download_file_string(string url)
{
//Downloads a file into a string.
dictionary@ d=engine.call("char* download_file_string(char*);",url);
int e=-1;
d.get("0",e);
string data=string_create_from_pointer(e, 0);
return data;
}
//FTP functions
int ftp_connect(string server, int port=21, string username="", string password="")
{
//Connect to an FTP server
dictionary d=engine.call("int ftp_connect(char*, int, char*, char*);",server,port,username,password);
int e=-1;
d.get("0",e);
return e;
}
int ftp_disconnect()
{
//Disconnect from the connected FTP server
dictionary d=engine.call("int ftp_disconnect();");
int e=-1;
d.get("0",e);
return e;
}
int ftp_receive(string filename)
{
//Receive a file from the connected FTP server.
dictionary d=engine.call("int ftp_receive(char*);",filename);
int e=-1;
d.get("0",e);
return e;
}
int ftp_receive_as(string filename,string target)
{
//Receive a file with a custom filename from the connected FTP server.
dictionary d=engine.call("int ftp_receive_as(char*,char*);",filename,target);
int e=-1;
d.get("0",e);
return e;
}
int ftp_send(string filename)
{
//Send a file to the FTP server
dictionary d=engine.call("int ftp_send(char*);",filename);
int e=-1;
d.get("0",e);
return e;
}
int ftp_send_as(string filename,string target)
{
//Send a file with a custom filename to the FTP server
dictionary d=engine.call("int ftp_send_as(char*,char*);",filename,target);
int e=-1;
d.get("0",e);
return e;
}
int ftp_directory_set(string dir)
{
//Set the current FTP directory.
dictionary d=engine.call("int ftp_directory_set(char*);",dir);
int e=-1;
d.get("0",e);
return e;
}
string ftp_directory_get()
{
//Get the current FTP directory
dictionary@ d=engine.call("char* ftp_directory_get();");
int e=-1;
d.get("0",e);
string data=string_create_from_pointer(e, 0);
return data;
}
int ftp_directory_create(string dir)
{
//Create a new FTP directory.
dictionary d=engine.call("int ftp_directory_create(char*);",dir);
int e=-1;
d.get("0",e);
return e;
}
int ftp_directory_delete(string dir)
{
//Delete an FTP directory.
dictionary d=engine.call("int ftp_directory_delete(char*);",dir);
int e=-1;
d.get("0",e);
return e;
}
int ftp_file_delete(string file)
{
//Delete an FTP file.
dictionary d=engine.call("int ftp_file_delete(char*);",file);
int e=-1;
d.get("0",e);
return e;
}
int ftp_file_rename(string file, string newfile)
{
//Rename or move an FTP file.
dictionary d=engine.call("int ftp_file_rename(char*,char*);",file,newfile);
int e=-1;
d.get("0",e);
return e;
}
string[] ftp_get_directories()
{
//Get a list of directories inside the current directory
dictionary@ d=engine.call("char* ftp_get_directories();");
int e=-1;
d.get("0",e);
string data=string_create_from_pointer(e, 0);
string[] data2=string_split(data,"\r\n",false);
return data2;
}
string[] ftp_get_files()
{
//Get a list of files inside the current directory
dictionary@ d=engine.call("char* ftp_get_files();");
int e=-1;
d.get("0",e);
string data=string_create_from_pointer(e, 0);
string[] data2=string_split(data,"\r\n",false);
return data2;
}
//Joystick Functions
int joystick_init()
{
//Load the xInput library. Must call in order to use joystick functions.
dictionary d=engine.call("int joystick_init();");
int e=-1;
d.get("0",e);
return e;
}
int joystick_vibrate(int left_motor, int right_motor)
{
//Vibrate a joystick left/right motors. Range is 0, off, to 65535, full.
dictionary d=engine.call("int joystick_vibrate(int, int);",left_motor, right_motor);
int e=-1;
d.get("0",e);
return e;
}
int joystick_vibrate_ms(int left_motor, int right_motor, int ms)
{
//Vibrate a joystick left/right motors for a certain amount of time.
dictionary d=engine.call("int joystick_vibrate_ms(int, int, int);",left_motor, right_motor, ms);
int e=-1;
d.get("0",e);
return e;
}
void reader(string title, string text, string defaulttext, string okname="OK")
{
//Display a dialog with a read only edit box containing text of your choice and an OK button.
engine.call("int reader(char*, char*, char*,char*);",title,text,defaulttext,okname);
}
void notify(string title, string text, string okname="OK")
{
//Display an alert message with a custom OK button text.
engine.call("int notify(char*, char*, char*);",title,text,okname);
}
string[] open_file_select(string title, string defaultpath="", string pattern="All files (*.*)|*.*", int position=0)
{
//Create a standard open file dialog. Supports multi-selection.
dictionary@ d=engine.call("char* open_file_select(char*,char*,char*, int);",title,defaultpath,pattern,position);
int e=-1;
d.get("0",e);
string data=string_create_from_pointer(e, 0);
string[] data2=string_split(data,"\r\n",false);
return data2;
}