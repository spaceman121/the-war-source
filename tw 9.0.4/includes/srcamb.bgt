source@[] sources(0);
class source
{
int source_sound;
int lx;
int rx;
int miny;
int maxy;
int minz;
int maxz;
string soundfile;
bool paused=false;
int id=-1;
bool p2;
source(int source_lx, int source_rx, int source_miny, int source_maxy, int source_minz, int source_maxz, string file, bool source_paused=false, int source_id=-1)
{
lx=source_lx;
rx = source_rx;
miny=source_miny;
maxy= source_maxy;
minz=source_minz;
maxz=source_maxz;
soundfile=file;
source_sound=sourcepool.play_3d(soundfile, me.x, me.y, me.z, lx, miny, minz, facing, true);
id=source_id;
sourcepool.update_sound_3d(source_sound, lx, miny, minz);
paused=source_paused;
if(paused==true)
{
sourcepool.pause_sound(source_sound);
}
p2=paused;
sourcepool.update_sound_range_3d(source_sound, 0, rx-lx, 0, maxy-miny, 0, maxz-minz);
}
}
class amb
{
int minx,maxx,miny,maxy,minz,maxz;
sound loop;
bool inrange=false,force_paused=false;
amb(int c1, int c2, int c3, int c4, int c5, int c6, string so)
{
minx=c1;maxx=c2;miny=c3;maxy=c4;minz=c5;maxz=c6;loop.stream(so);
}
bool is_in_range()
{
return (minx<=mr.x&&maxx>=mr.x&&miny<=mr.y&&maxy>=mr.y&&minz<=me.z&&maxz>=me.z);
}
void check()
{
if(force_paused) return;
bool r=is_in_range();
if(r==true&&inrange==false)
{
inrange=true;
loop.play_looped();
}
else if(r==false&&inrange==true)
{
inrange=false;
loop.pause();
}
}
~amb()
{
if(loop.playing)
loop.stop();
loop.close();
}
}
amb@[] ambs;
void sourcecheckloop()
{
for (uint i=0; i<sources.length(); i++)
{
if(sources[i].paused!=sources[i].p2)
{
if(sources[i].paused==true and sources[i].p2==false)
{
sourcepool.pause_sound(sources[i].source_sound);
sources[i].p2=true;
}
else if(sources[i].paused==false and sources[i].p2==true)
{
sourcepool.resume_sound(sources[i].source_sound);
sources[i].p2=false;
}
}
}
for(uint i=0; i<ambs.length; i++)
{
ambs[i].check();
}
}
void destroy_all_sources()
{
for(uint i=0; i<sources.length(); i++)
{
sourcepool.destroy_sound(sources[i].source_sound);
}
sources.resize(0);
ambs.resize(0);
}
void pause_all_sources()
{
for(uint i=0; i<sources.length(); i++)
{
sources[i].paused=true;
}
for(uint i=0; i<ambs.length; i++)
{
ambs[i].force_paused=true;
if(ambs[i].loop.playing) ambs[i].loop.pause();
}
}
void resume_all_sources()
{
for(uint i=0; i<sources.length(); i++)
{
sources[i].paused=false;
}
for(uint i=0; i<ambs.length; i++)
{
ambs[i].force_paused=false;
ambs[i].check();
}
}
void spawn_source(int source_lx, int source_rx, int source_miny, int source_maxy, int source_minz, int source_maxz, string soundfile, bool paused=false, int id=-1)
{
source source1(source_lx, source_rx, source_miny, source_maxy, source_minz, source_maxz, soundfile, paused, id);
sources.insert_last(source1);
}
void destroy_source(int id)
{
for(uint i=0; i<sources.length(); i++)
{
if(sources[i].id==id and id > -1)
{
sourcepool.destroy_sound(sources[i].source_sound);
sources.remove_at(i);
}
}
}
void create_amb(int minx, int maxx, int miny, int maxy, int minz, int maxz, string sound)
{
amb amb1(minx,maxx,miny,maxy,minz,maxz,sound);
ambs.insert_last(amb1);
}
void change_source_volume(int v)
{
fade_pool(sourcepool,0.25,v);
}
