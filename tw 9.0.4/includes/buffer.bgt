int bufferpos;
buffer@[] buffers(0);
class buffer
{
int interrupt=0;
int active=1;
int pos;
string name;
string[] items;
bool hidden=false;
buffer(string n)
{
name=n;
}
}
void create_buffer(string bname)
{
buffer b1(bname);
buffers.insert_last(b1);
}
void firstbuffer()
{
bufferpos=0;
speakfocusedbuffer();
}
void lastbuffer()
{
bufferpos=buffers.length()-1;
speakfocusedbuffer();
}
void bufferleft()
{
if (bufferpos<=0)
{
bufferpos=0;
speakfocusedbuffer();
}
else
{
bufferpos-=1;
if(buffer_hidden(bufferpos)) bufferpos-=1;
speakfocusedbuffer();
}
}
void bufferright()
{
if (bufferpos>=(buffers.length()-1))
{
if (buffers.length()>0)
bufferpos=buffers.length()-1;
speakfocusedbuffer();
}
else
{
bufferpos+=1;
if(buffer_hidden(bufferpos)) bufferpos+=1;
speakfocusedbuffer();
}
}
void nextbufferitem()
{
if (buffers[bufferpos].pos<(buffers[bufferpos].items.length()-1))
{
buffers[bufferpos].pos+=1;
play_buffer_item_sound();
speak(buffers[bufferpos].items[buffers[bufferpos].pos]);
}
}
void prevbufferitem()
{
if (buffers[bufferpos].pos>0)
{
buffers[bufferpos].pos-=1;
play_buffer_item_sound();
speak(buffers[bufferpos].items[buffers[bufferpos].pos]);
}
}
void topbufferitem()
{
if (buffers[bufferpos].items.length()>0)
{
buffers[bufferpos].pos=0;
play_buffer_item_sound();
speak(buffers[bufferpos].items[buffers[bufferpos].pos]);
}
}
void bottombufferitem()
{
if (buffers[bufferpos].items.length()>0)
{
buffers[bufferpos].pos=(buffers[bufferpos].items.length()-1);
play_buffer_item_sound();
speak(buffers[bufferpos].items[buffers[bufferpos].pos]);
}
}
void add_buffer_item(string buffername, string item,bool tr=true,bool silent=false)
{
for (uint i=0; i<buffers.length(); i++)
{
if (buffers[i].name==buffername and buffers[i].active==1 or buffers[i].name=="all" and buffers[i].active==1)
{
if (buffers[i].name!="all")
{
if(silent==false)
{
if(tr==true)
speak(item,buffers[i].interrupt,false,false);
else
speak(item,buffers[i].interrupt,false,false);
}
}
buffers[i].items.insert_last(item);
}
}
}
void export_buffer(string buffername)
{
if(directory_exists("logs")==false)
directory_create("logs");
for (uint i=0; i<buffers.length(); i++)
{
if (buffers[i].name==buffername)
{
string temp="\r\nexported at "+get_date()+" at "+get_time();
for (uint i2=0; i2<buffers[i].items.length(); i2++)
{
temp+="\r\n"+buffers[i].items[i2];
}
file f;
f.open("logs/"+buffers[i].name+".log","ab");
f.write(temp);
f.close();
}
}
}
void export_all_buffers()
{
if(string_contains(get_script_path(),"dropbox",1)>-1 and SCRIPT_COMPILED)
return;
for (uint i=0; i<buffers.length(); i++)
{
export_buffer(buffers[i].name);
}
}
void activate_buffer()
{
if (buffers[bufferpos].active==1)
{
buffers[bufferpos].active=0;
speak(buffers[bufferpos].name+" deactivated.");
}
else if (buffers[bufferpos].active==0)
{
buffers[bufferpos].active=1;
speak(buffers[bufferpos].name+" activated.");
}
}

void interrupt_buffer()
{
if (buffers[bufferpos].interrupt==1)
{
buffers[bufferpos].interrupt=0;
speak(buffers[bufferpos].name+" not interrupting.");
}
else if (buffers[bufferpos].interrupt==0)
{
buffers[bufferpos].interrupt=0;
speak(buffers[bufferpos].name+" not interrupting.");
}
}
int buffer_active(string buffername)
{
for (uint i=0; i<buffers.length(); i++)
{
if (buffers[i].name==buffername)
{
return buffers[i].active;
}
}
return 0;
}
void copy_buffer_item()
{
if (buffers[bufferpos].items.length()>0)
clipboard_copy_text(buffers[bufferpos].items[buffers[bufferpos].pos]);
}
void play_buffer_sound()
{
if (bufferbeep==1)
p.play_stationary_extended("bufferswitch.ogg",false,0,convert_to_pan(buffers.length(),bufferpos,-20,20),0,100);
}
void play_buffer_item_sound()
{
if (bufferbeep==1)
p.play_stationary_extended("buffermove.ogg",false,0,convert_to_pan(buffers.length(),bufferpos,-20,20),0,convert_to_pan(buffers[bufferpos].items.length(),buffers[bufferpos].pos,25,200));
}
void speakfocusedbuffer()
{
play_buffer_sound();
if (buffers[bufferpos].items.length()>0)
speak(buffers[bufferpos].name+". "+(buffers[bufferpos].pos+1)+" of "+buffers[bufferpos].items.length()+" items. Buffer "+(bufferpos+1)+" of "+buffers.length());
else
speak(buffers[bufferpos].name+". Empty. Buffer "+(bufferpos+1)+" of "+buffers.length());
}
bool buffer_hidden(uint bufferindex)
{
if(bufferindex>=0&&bufferindex<buffers.length)
return buffers[bufferindex].hidden;
return false;
}