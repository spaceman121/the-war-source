store@[] stores;
class store
{
string [] item_names, descriptions;
int[] prices;
int x, y, z;
string map, name;
int mode=0;
store(int sx, int sy, int sz, string sm, string n)
{
x=sx;
y=sy;
z=sz;
map=sm;
name=n;
}
void add(string item_name, string description, int price)
{
item_names.insert_last(item_name);
descriptions.insert_last(description);
prices.insert_last(price);
}
void send(int peer, string packet="buysomething", bool shelter=false)
{
if(item_names.length()==0)
{
send_reliable(peer, "this store has no items. sorry.", 0);
return;
}
int index=get_player_index(peer);
if(index>-1)
{
int s=in_shelter(players[index].name);
string items;
int p, canbuy;
for(int i=0; i<item_names.length(); i++)
{
if(shelter and s>-1)
{
p=prices[i]-(prices[i]*0.1);
canbuy=shelters[s].dollars/p;
}
else
{
p=prices[i];
canbuy=players[index].get_item_count("dollar")/p;
}
items+=string_replace(item_names[i], "_", " ", true)+". costs "+p+" dollars. description. "+descriptions[i]+". you can buy "+canbuy+":"+item_names[i]+"[]";
}
send_menu(peer, string_replace(name, "_", " ", true), packet, items);
}
}
int get_item_index(string name)
{
for(int i=0; i<item_names.length(); i++)
{
if(item_names[i]==name) return i;
}
return -1;
}
}

void create_store(int x, int y, int z, string map, string intro)
{
store s(x, y, z, map, intro);
stores.insert_last(s);
}

int get_store_index(int x, int y, int z, string map)
{
for(int i=0; i<stores.length(); i++)
{
if(stores[i].x==x and stores[i].y==y and stores[i].z==z and stores[i].map==map) return i;
}
return -1;
}
int get_store_index_from(string name)
{
for(int i=0; i<stores.length(); i++)
{
if(stores[i].name==name) return i;
}
return -1;
}
void add_to_store(string item, string description, int price, string storename="misc_store")
{
bool added=true;
int index=get_store_index_from(storename);
if(index>-1)
{
string[] tempitems=stores[index].item_names;
for(int i=0; i<tempitems.length(); i++)
{
if(tempitems[i]==item) added=false;
}
}
else added=false;
if(added) stores[index].add(item, description, price);
else
{
return;
}
}

int get_shelter_price(string itemname, int amount)
{
int[] prices=get_amounts();
int i=get_item_index(itemname);
if(i>-1)
{
return prices[i]*amount-(prices[i]*amount)*0.25;
}
return 0;
}
void reset_stores()
{
for(uint i=0; i<stores.length; i++)
{
stores[i].item_names.resize(0);
stores[i].descriptions.resize(0);
stores[i].prices.resize(0);
}
}