obj@[] objs(0);
class obj
{
int x;
int y;
int z;
string name;
string map;
timer beeptimer, timeouttimer;
int amount;
int id=-1;
bool dropped=false;
obj(int ox, int oy, int oz, string omap, string oname, int oa=1, bool dropped=true,int oid=-1)
{
map=omap;
x=ox;
y=oy;
z=oz;
name=oname;
amount=oa;
id=oid;
this.dropped=dropped;
}
}
void objloop()
{
for(uint i=0;i<objs.length();i++)
{
if(objs[i].beeptimer.elapsed>=1000)
{
objs[i].beeptimer.restart();
play("obj", objs[i].x, objs[i].y, objs[i].z, objs[i].map,-1,true,false);
}
if(objs[i].timeouttimer.elapsed>=180000)
{
play("obj_break"+random(1,3),objs[i].x,objs[i].y,objs[i].z,objs[i].map);
remove_obj(i);
i--;
continue;
}
for(uint x=0; x<players.length(); x++)
{
if(players[x].invinsible==true or players[x].is_dead==true) continue;
if(get_3d_distance(objs[i].x,objs[i].y,objs[i].z,players[x].x,players[x].y,players[x].z)<=5 and players[x].map==objs[i].map)
{
play("objget"+random(1, 1), objs[i].x, objs[i].y, objs[i].z, objs[i].map);
objgrabs++;
if(objs[i].name=="coin_pack")
{
send_reliable(players[x].peer_id,"A pack of coins!",2);
players[x].give("coin",random(20,80));
}
else if(objs[i].name=="remote_timebomb_controller")
{
if(players[x].get_item_count("remote_timebomb_controller")>0)
{
send_reliable(players[x].peer_id,"remote timebomb",2);
players[x].give("remote_timebomb",1);
}
else
{
send_reliable(players[x].peer_id,"A remote timebomb controller!",2);
players[x].give("remote_timebomb_controller",1);
}
}
else if(objs[i].name=="remote_gun_controller")
{
if(players[x].get_item_count("remote_gun_controller")>0)
{
send_reliable(players[x].peer_id,"remote gun",2);
players[x].give("remote_gun",1);
}
else
{
send_reliable(players[x].peer_id,"a remote gun controller!",2);
players[x].give("remote_gun_controller",1);
}
}
else if(objs[i].name=="gas_mask")
{
if(players[x].get_item_count("gas_mask")>0)
{
send_reliable(players[x].peer_id,"air canister",2);
players[x].give("air_canister",1);
}
else
{
send_reliable(players[x].peer_id,"A gas mask!",2);
players[x].give("gas_mask",1);
}
}
else if(objs[i].name=="ammo")
{
int tmpint=random(15,50);
string temp=guns[random(0,guns.length()-1)];
send_reliable(players[x].peer_id,tmpint+" "+temp+" ammo!",2);
players[x].give("ammo_"+temp,tmpint);
}
else if(objs[i].name=="antibiotic_pack")
{
players[x].give("antibiotic",30);
send_reliable(players[x].peer_id,"play_s gift.ogg",0);
send_reliable(players[x].peer_id,"an antibiotic pack!",2);
}
else if(objs[i].name=="mini_antibiotic_pack")
{
players[x].give("antibiotic",15);
send_reliable(players[x].peer_id,"play_s gift.ogg",0);
send_reliable(players[x].peer_id,"a mini antibiotic pack!",2);
}
else if(objs[i].name=="ultra_antibiotic_pack")
{
players[x].give("antibiotic",60);
send_reliable(players[x].peer_id,"play_s gift.ogg",0);
send_reliable(players[x].peer_id,"an ultra antibiotic pack!",2);
}
else if(objs[i].name=="health_pack")
{
if(players[x].health<50000)
{
send_reliable(players[x].peer_id, "Extra health!", 2);
players[x].playsound("antibiotic"+random(1,4));
players[x].health+=random(1000,10000);
players[x].oldhealth=players[x].health;
}
else
{
send_reliable(players[x].peer_id,"antibiotic",2);
players[x].give("antibiotic",1);
}
}
else if(objs[i].name=="ultrabomb_locator")
{
if(players[x].get_item_count("ultrabomb_locator")>0 and !objs[i].dropped)
{
send_reliable(players[x].peer_id, "ultrabomb", 2);
players[x].give("ultrabomb", 1);
}
else
{
send_reliable(players[x].peer_id, "ultrabomb locator", 2);
players[x].give("ultrabomb_locator", 1);
}
}
else if(objs[i].name=="bullet_bomb_locator")
{
if(players[x].get_item_count("bullet_bomb_locator")>0 and !objs[i].dropped)
{
send_reliable(players[x].peer_id, "bullet bomb", 2);
players[x].give("bullet_bomb", 1);
}
else
{
send_reliable(players[x].peer_id, "bullet bomb locator", 2);
players[x].give("bullet_bomb_locator", 1);
}
}
else
{
if(objs[i].amount==1) send_reliable(players[x].peer_id, string_replace(objs[i].name,"_"," ",true), 2);
else send_reliable(players[x].peer_id,objs[i].amount+" "+string_replace(objs[i].name,"_"," ",true)+"s", 2);
players[x].give(objs[i].name,objs[i].amount);
}
remove_obj(i);
break;
}
}
}
}
void spawn_obj(int x, int y, int z, string map, string name, int amount=1,bool dropped=false,int id=random(0,9999))
{
obj i1(x,y,z,map, name,amount,dropped,id);
objspawns++;
objs.insert_last(i1);
}
void spawn_rand_obj(int minx, int maxx, int miny, int maxy, int minz, int maxz, string map, string[] choices)
{
int x,y,z;
string tile;
do
{
x=random(minx,maxx);
y=random(miny,maxy);
z=random(minz,maxz);
tile=get_tile_at(x,y,z,map);
netloop();
}
while(tile==""||string_left(tile,4)=="wall");
spawn_obj(x,y,z,map,choices[random(0,(choices.length()-1))]);
}
void move_all_objs_to(int x, int y, int z, string map)
{
for(uint i=0; i<objs.length(); i++)
{
if(objs[i].map!="main") continue;
objs[i].x=x;
objs[i].y=y;
objs[i].z=z;
objs[i].map=map;
}
}
int get_nearest_item_at(int x, int y, int z, string map, string type)
{
int current_distance=-1;
int final_index=-1;
for(uint i=0; i<objs.length(); i++)
{
if(objs[i].map!=map and objs[i].name!=type) continue;
int dist=get_3d_distance(x, y, z, objs[i].x, objs[i].y, objs[i].z);
if(current_distance==-1)
{
current_distance=dist;
final_index=i;
}
else
{
if(dist<current_distance)
{
current_distance=dist;
final_index=i;
}
}
}
return final_index;
}

void remove_obj(int it)
{
@objs[it]=null;
objs.remove_at(it);
}
void move_objs_to(int x, int y, int z, string map, int itemcount)
{
int objgrabs=0;
for(uint i=0;i<objs.length();i++)
{
if(objs[i].map==map and objs[i].name!="item_grabber")
{
objs[i].x=x;
objs[i].y=y;
objs[i].z=z;
objgrabs++;
}
if(objgrabs>itemcount) break;
}
}