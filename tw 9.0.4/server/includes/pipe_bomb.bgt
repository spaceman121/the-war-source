pipe_bomb@[]pipe_bombs(0);
class pipe_bomb {
double x,y,z;
int dir=0;
bool explode=true;
timer explodetimer;
int range=10;
int distance=1;
int mindammage=100000;
int maxdammage=200000;
string map;
string owner;
int spread=1;
pipe_bomb(double gx, double gy, double gz, double gdir, string gmap, string gowner)
{
x=gx;
y=gy;
z=gz;
dir=gdir;
map=gmap;
owner=gowner;
play("pipe_bomb_warn",x,y,z,map);
}
}
void pipe_bombloop()
{
for(uint j=0; j<pipe_bombs.length(); j++)
{
if(pipe_bombs[j].explodetimer.elapsed>=2500)
{
pipe_bombs[j].explodetimer.restart();
play("pipe_bombexplode",pipe_bombs[j].x,pipe_bombs[j].y,pipe_bombs[j].z,pipe_bombs[j].map);
send_reliable(0,"distsound pipe_bombexplodedist "+pipe_bombs[j].x+" "+pipe_bombs[j].y+" "+pipe_bombs[j].z+" "+pipe_bombs[j].map,0);
for(uint s=0; s<shelters.length; s++)
{
if(get_3d_distance(pipe_bombs[j].x,pipe_bombs[j].y,pipe_bombs[j].z,shelters[s].x,shelters[s].y,shelters[s].z)<=pipe_bombs[j].range&&shelters[s].map==pipe_bombs[j].map)
shelters[s].hit(random(2000,5000),pipe_bombs[j].owner+"'s pipe_bomb","pipe_bomb");
}
for(uint x=0; x<players.length(); x++)
{
if(in_vehicle(players[x].name)>-1 or players[x].newb==1 or players[x].is_dead or players[x].invinsible) continue;
if(get_3d_distance(pipe_bombs[j].x,pipe_bombs[j].y,pipe_bombs[j].z,players[x].x,players[x].y,players[x].z)<=pipe_bombs[j].range and players[x].map==pipe_bombs[j].map)
{
players[x].hit(pipe_bombs[j].mindammage,pipe_bombs[j].maxdammage);
players[x].should_subtract=true;
players[x].hitby=pipe_bombs[j].owner+"'s pipe_bomb";
}
}
for (uint i2=0; i2<objs.length(); i2++)
{
if (get_3d_distance(pipe_bombs[j].x,pipe_bombs[j].y,pipe_bombs[j].z,objs[i2].x,objs[i2].y,objs[i2].z)<=pipe_bombs[j].range and objs[i2].map==pipe_bombs[j].map)
{
play("obj_break"+random(1,3),objs[i2].x,objs[i2].y,objs[i2].z,objs[i2].map);
objs.remove_at(i2);
}
}
for(uint i2=0; i2<horbs.length; i2++)
{
if(get_3d_distance(pipe_bombs[j].x,pipe_bombs[j].y,pipe_bombs[j].z,horbs[i2].x,horbs[i2].y,horbs[i2].z)<=pipe_bombs[j].range&&horbs[i2].map==pipe_bombs[j].map) horbs[i2].shoot();
}
for (uint i2=0; i2<remguns.length(); i2++)
{
if (get_3d_distance(pipe_bombs[j].x,pipe_bombs[j].y,pipe_bombs[j].z,remguns[i2].x,remguns[i2].y,remguns[i2].z)<=pipe_bombs[j].range and remguns[i2].map==pipe_bombs[j].map)
{
remguns[i2].health-=random(1000,3000);
remguns[i2].hitby=pipe_bombs[j].owner+"'s pipe_bomb";
play("remgunhit"+random(1, 3),remguns[i2].x,remguns[i2].y,remguns[i2].z,remguns[i2].map);
}
}
for(uint v=0; v<vs.length; v++)
{
if(get_2d_distance(vs[v].x,vs[v].y,pipe_bombs[j].x,pipe_bombs[j].y)<=pipe_bombs[j].range)
{
vs[v].hit(random(pipe_bombs[j].mindammage,pipe_bombs[j].maxdammage),pipe_bombs[j].owner+"'s pipe_bomb","pipe_bomb");
}
}
for(uint r=0; r<robots.length; r++)
{
if(get_3d_distance(pipe_bombs[j].x,pipe_bombs[j].y,pipe_bombs[j].z,robots[r].x,robots[r].y,robots[r].z)<=pipe_bombs[j].range&&robots[r].map==pipe_bombs[j].map)
robots[r].hit(random(pipe_bombs[j].mindammage,pipe_bombs[j].maxdammage),"pipe_bomb",pipe_bombs[j].owner+"'s pipe_bomb");
}
for(uint x=0; x<impact_bombs.length(); x++)
{
if(get_3d_distance(pipe_bombs[j].x,pipe_bombs[j].y,pipe_bombs[j].z,impact_bombs[x].x,impact_bombs[x].y,impact_bombs[x].z)<=20 and pipe_bombs[j].map==impact_bombs[x].map)
{
play("ibombhit"+random(1,3),impact_bombs[x].x,impact_bombs[x].y,impact_bombs[x].z,impact_bombs[x].map);
impact_bombs[x].health-=random(pipe_bombs[j].mindammage,pipe_bombs[j].maxdammage);
}
}
@pipe_bombs[j]=null;
pipe_bombs.remove_at(j);
continue;
}
}
}
void spawn_pipe_bomb(double x, double y, double z, double dir, string map, string owner)
{
pipe_bomb f1(x, y, z, dir, map, owner);
pipe_bombs.insert_last(f1);
}
