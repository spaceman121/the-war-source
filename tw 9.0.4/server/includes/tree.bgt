tree@[]trees(0);
class tree
{
int x,y,z;
int id=-1;
int health=25000;
string map;
bool killed=false;
tree(int tx,int ty, int tz,string tmap,int tID=-1)
{
x=tx;
y=ty;
z=tz;
map=tmap;
if(tID>-1)
id=tID;
send_reliable(0,"spawntree "+x+" "+y+" "+z+" "+map+" "+id,0);
}
}
void treeloop()
{
for(uint i=0; i<trees.length(); i++)
{
if(trees[i].health<=0)
{
trees[i].killed=true;
}
if(trees[i].killed==true)
{
play("treecrash",trees[i].x,trees[i].y,trees[i].z,trees[i].map);
send_reliable(0,"killtree "+trees[i].id,0);
@trees[i]=null;
trees.remove_at(i);
continue;
}
}
}
int is_on_tree(int x,int y,int z,string map)
{
for(uint i=0; i<trees.length(); i++)
{
if(trees[i].x==x and trees[i].y==y and trees[i].z==z and trees[i].map==map)
return i;
}
return -1;
}
void spawn_tree(int x,int y,int z,string map,int id=random(1000,9999))
{
z+=random(3,15);
tree t1(x,y,z,map,id);
trees.insert_last(t1);
}
void remove_all_trees()
{
for(uint i=0; i<trees.length(); i++)
{
trees[i].killed=true;
}
}
