double stn(string strin)
{
return string_to_number(strin);
}
class multiversion
{
int[] vers;
multiversion(string input)
{
string[] split=string_split(input,".",false);
for(uint i=0; i<split.length(); i++)
{
vers.insert_last(stn(split[i]));
}
}
int opIndex(uint n)
{
return this.vers[n];
}
uint length()
{
return this.vers.length();
}
int opCmp(multiversion@ other)
{
if(this.length()>other.length()) return 1;
else if(this.length()<other.length()) return -1;
for(uint i=0; i<this.length(); i++)
{
if(this[i]>other[i]) return 1;
else if(this[i]<other[i]) return -1;
}
return 0;
}
}
void main()
{
string ver1=input_box("multiver test","enter the first version");
if(ver1=="") exit();
string ver2=input_box("multiver test","enter the second version");
if(ver2=="") exit();
multiversion a(ver1);
multiversion b(ver2);
string ret;
if(a<b) ret=ver1+" is less than "+ver2;
else if(a>b) ret=ver1+" is greator than "+ver2;
else ret=ver1+" is equal to "+ver2;
alert("multiver test",ret);
}