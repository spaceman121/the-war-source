motion_bomb@[] motion_bombs(0);
class motion_bomb
{
string owner;
int z;
string map;
int x, y;
int seconds=1000;
int beeptime;
timer beeptimer, bombtimer;
bool d=false;
motion_bomb(int tx,int ty,int tz, string tmap, string towner)
{
owner=towner;
x=tx;
y=ty;
z=tz;
map=tmap;
play("motion_bomb_place",x,y,z,map);
}
}
void motionbombloop()
{
for (uint i=0; i<motion_bombs.length(); i++)
{
if(motion_bombs[i].d==false)
{
for(uint i2=0; i2<vs.length(); i2++)
{
if (get_3d_distance(motion_bombs[i].x,motion_bombs[i].y,motion_bombs[i].z,vs[i2].x,vs[i2].y,vs[i2].z)<=10 and vs[i2].map==motion_bombs[i].map and vs[i2].owner!=motion_bombs[i].owner)
{
if(are_teamed(motion_bombs[i].owner,vs[i2].owner)) continue;
motion_bombs[i].bombtimer.restart();
motion_bombs[i].beeptimer.restart();
motion_bombs[i].d=true;
}
}
for(uint i2=0; i2<players.length(); i2++)
{
if(players[i2].invinsible==true||  players[i2].newb==1 || players[i2].is_dead==true||in_vehicle(players[i2].name)>-1) continue;
if (get_3d_distance(motion_bombs[i].x,motion_bombs[i].y,motion_bombs[i].z,players[i2].x,players[i2].y,players[i2].z)<=5 and players[i2].map==motion_bombs[i].map and players[i2].name!=motion_bombs[i].owner&&!are_teamed(motion_bombs[i].owner,players[i2].name))
{
motion_bombs[i].bombtimer.restart();
motion_bombs[i].beeptimer.restart();
motion_bombs[i].d=true;
}
}
}
if(motion_bombs[i].d==true)
{
motion_bombs[i].seconds=3000-motion_bombs[i].bombtimer.elapsed;
motion_bombs[i].beeptime=motion_bombs[i].seconds/5+50;
if (motion_bombs[i].beeptimer.elapsed>=motion_bombs[i].beeptime)
{
motion_bombs[i].beeptimer.restart();
play("motion_bombbeep",motion_bombs[i].x,motion_bombs[i].y,motion_bombs[i].z,motion_bombs[i].map,-1,true,false);
}
if (motion_bombs[i].seconds<=0)
{
play("motion_bomb",motion_bombs[i].x,motion_bombs[i].y,motion_bombs[i].z,motion_bombs[i].map);
play("motion_bombhit",motion_bombs[i].x,motion_bombs[i].y,motion_bombs[i].z,motion_bombs[i].map);
send_reliable(0,"distsound motion_bombdist "+motion_bombs[i].x+" "+motion_bombs[i].y+" "+motion_bombs[i].z+" "+motion_bombs[i].map,0);
for(uint i2=0; i2<impact_bombs.length(); i2++)
{
if(get_3d_distance(impact_bombs[i2].x,impact_bombs[i2].y,impact_bombs[i2].z,motion_bombs[i].x,motion_bombs[i].y,motion_bombs[i].z)<=20 and impact_bombs[i2].map==motion_bombs[i].map)
{
impact_bombs[i2].health-=random(500,1500);
play("ibombhit"+random(1,3),impact_bombs[i2].x,impact_bombs[i2].y,impact_bombs[i2].z,impact_bombs[i2].map);
}
}
for (uint i2=0; i2<players.length(); i2++)
{
if(players[i2].invinsible==true || players[i2].newb==1 || players[i2].is_dead==true||in_vehicle(players[i2].name)>-1) continue;
if (get_3d_distance(motion_bombs[i].x,motion_bombs[i].y,motion_bombs[i].z,players[i2].x,players[i2].y,players[i2].z)<=20 and players[i2].map==motion_bombs[i].map)
{
players[i2].hit(60000,75000);
players[i2].hitby=motion_bombs[i].owner+"'s motion bomb";
}
}
for (uint i2=0; i2<objs.length(); i2++)
{
if (get_3d_distance(motion_bombs[i].x,motion_bombs[i].y,motion_bombs[i].z,objs[i2].x,objs[i2].y,objs[i2].z)<=20 and objs[i2].map==motion_bombs[i].map)
{
play("obj_break"+random(1,3),objs[i2].x,objs[i2].y,objs[i2].z,objs[i2].map);
@objs[i2]=null;
objs.remove_at(i2);
}
}
for (uint i2=0; i2<remguns.length(); i2++)
{
if (get_3d_distance(motion_bombs[i].x,motion_bombs[i].y,motion_bombs[i].z,remguns[i2].x,remguns[i2].y,remguns[i2].z)<=20 and remguns[i2].map==motion_bombs[i].map)
{
remguns[i2].health-=random(500, 1500);
remguns[i2].hitby=motion_bombs[i].owner+"'s motion bomb";
play("remgunhit"+random(1, 3),remguns[i2].x,remguns[i2].y,remguns[i2].z,remguns[i2].map);
}
}
for(uint v=0; v<vs.length; v++)
{
if(get_3d_distance(motion_bombs[i].x,motion_bombs[i].y,motion_bombs[i].z,vs[v].x,vs[v].y,vs[v].z)<=20&&vs[v].map==motion_bombs[i].map)
vs[v].hit(random(2500,5000),motion_bombs[i].owner+"'s motion bomb");
}
@motion_bombs[i]=null;
motion_bombs.remove_at(i);
}
}
}
}
void spawn_motion_bomb(int x,int y, int z, string map,string owner)
{
motion_bomb bomb1(x,y,z,map,owner);
motion_bombs.insert_last(bomb1);
}
void destroy_all_motion_bombs()
{
motion_bombs.resize(0);
}
void create_motion_bomb_from_datastream(string data)
{
dictionary d=deserialize(data);
int x=dget_int(d,"x"),y=dget_int(d,"y"),z=dget_int(d,"z");
string map=dget_string(d,"map"),owner=dget_string(d,"owner");
motion_bomb m1(x,y,z,map,owner);
motion_bombs.insert_last(m1);
}
void create_motion_bomb_array_from_datastream(string stream)
{
dictionary@ temp=deserialize(stream);
string[] keys=temp.get_keys();
for(uint i=0; i<keys.length; i++)
{
string val=dget_string(temp,keys[i]);
create_motion_bomb_from_datastream(val);
}
@temp=null;
}
string[] create_datastream_from_motion_bomb(motion_bomb@ m)
{
dictionary d;
d.set("x",m.x);d.set("y",m.y);d.set("z",m.z);d.set("owner",m.owner);d.set("map",m.map);
string[] ret(2);
ret[0]=randomstring(5);
ret[1]=serialize(d);
return ret;
}
string create_datastream_from_motion_bomb_array()
{
dictionary d;
for(uint i=0; i<motion_bombs.length; i++)
{
string[] r=create_datastream_from_motion_bomb(motion_bombs[i]);
d.set(r[0],r[1]);
}
return serialize(d);
}