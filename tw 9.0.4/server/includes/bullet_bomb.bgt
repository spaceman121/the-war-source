bullet_bomb@[] bullet_bombs(0);
class bullet_bomb
{
string owner;
int z;
string map;
int x, y;
double health=5000;
bullet_bomb(int tx,int ty,int tz, string tmap, string towner)
{
owner=towner;
x=tx;
y=ty;
z=tz;
map=tmap;
}
}
void bulletbombloop()
{
for (uint i=0; i<bullet_bombs.length(); i++)
{
if(bullet_bombs[i].health<=0)
{
play("bullet_bomb",bullet_bombs[i].x,bullet_bombs[i].y,bullet_bombs[i].z,bullet_bombs[i].map,-1,true,false);
send_reliable(0,"distsound bullet_bombdist "+bullet_bombs[i].x+" "+bullet_bombs[i].y+" "+bullet_bombs[i].z+" "+bullet_bombs[i].map,0);
netloop();
for (uint i2=0; i2<players.length(); i2++)
{
if(in_vehicle(players[i2].name)>-1 or players[i2].newb==1 or players[i2].is_dead or players[i2].invinsible) continue;
if (get_3d_distance(bullet_bombs[i].x,bullet_bombs[i].y,bullet_bombs[i].z,players[i2].x,players[i2].y,players[i2].z)<=30 and players[i2].map==bullet_bombs[i].map)
{
players[i2].hit(3500,7000);
players[i2].should_subtract=false;
players[i2].hitby=bullet_bombs[i].owner+"'s bullet bomb";
players[i2].playsound("bullet_bombhit");
}
}
for (uint i2=0; i2<objs.length(); i2++)
{
if (get_3d_distance(bullet_bombs[i].x,bullet_bombs[i].y,bullet_bombs[i].z,objs[i2].x,objs[i2].y,objs[i2].z)<=30 and objs[i2].map==bullet_bombs[i].map)
{
play("obj_break"+random(1,3),objs[i2].x,objs[i2].y,objs[i2].z,objs[i2].map);
objs.remove_at(i2);
}
}
for (uint i2=0; i2<trees.length(); i2++)
{
if (get_3d_distance(bullet_bombs[i].x,bullet_bombs[i].y,bullet_bombs[i].z,trees[i2].x,trees[i2].y,trees[i2].z)<=30 and trees[i2].map==bullet_bombs[i].map)
{
trees[i2].health-=random(3500,7000);
}
}
for (uint i2=0; i2<remguns.length(); i2++)
{
if (get_3d_distance(bullet_bombs[i].x,bullet_bombs[i].y,bullet_bombs[i].z,remguns[i2].x,remguns[i2].y,remguns[i2].z)<=30 and remguns[i2].map==bullet_bombs[i].map)
{
remguns[i2].health-=random(3500,7000);
remguns[i2].hitby=bullet_bombs[i].owner+"'s bullet bomb";
play("remgunhit"+random(1, 3),remguns[i2].x,remguns[i2].y,remguns[i2].z,remguns[i2].map);
}
}
for(uint v=0; v<vs.length; v++)
{
if(get_3d_distance(bullet_bombs[i].x,bullet_bombs[i].y,bullet_bombs[i].z,vs[v].x,vs[v].y,vs[v].z)<=40&&vs[v].map==bullet_bombs[i].map)
vs[v].hit(random(3500,7000),bullet_bombs[i].owner+"'s bullet bomb");
}
for(uint v=0; v<shelters.length; v++)
{
if(get_3d_distance(bullet_bombs[i].x,bullet_bombs[i].y,bullet_bombs[i].z,shelters[v].x,shelters[v].y,shelters[v].z)<=40&&shelters[v].map==bullet_bombs[i].map)
shelters[v].hit(random(3500,7000),bullet_bombs[i].owner+"'s bullet bomb");
}
netloop();
for(uint x=0; x<bullet_bombs.length(); x++)
{
netloop();
if(get_3d_distance(bullet_bombs[i].x,bullet_bombs[i].y,bullet_bombs[i].z,bullet_bombs[x].x,bullet_bombs[x].y,bullet_bombs[x].z)<=30 and bullet_bombs[i].map==bullet_bombs[x].map&&x!=i)
{
play("bullet_bombimpact",bullet_bombs[x].x,bullet_bombs[x].y,bullet_bombs[x].z,bullet_bombs[x].map);
send_reliable(0,"distsound bullet_bombimpactdist "+bullet_bombs[x].x+" "+bullet_bombs[x].y+" "+bullet_bombs[x].z+" "+bullet_bombs[x].map,0);
bullet_bombs[x].health=-1;
}
}
for(uint x=0; x<impact_bombs.length(); x++)
{
if(get_3d_distance(bullet_bombs[i].x,bullet_bombs[i].y,bullet_bombs[i].z,impact_bombs[x].x,impact_bombs[x].y,impact_bombs[x].z)<=30 and bullet_bombs[i].map==impact_bombs[x].map)
{
play("ibombhit"+random(1,3),impact_bombs[x].x,impact_bombs[x].y,impact_bombs[x].z,impact_bombs[x].map);
impact_bombs[x].health=-1;
}
}
bullet_bombs.remove_at(i);
}
}
}
void spawn_bullet_bomb(int x,int y, int z, string map,string owner)
{
bullet_bomb bomb1(x,y,z,map,owner);
bullet_bombs.insert_last(bomb1);
}
void destroy_all_bullet_bombs()
{
bullet_bombs.resize(0);
}