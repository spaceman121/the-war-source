mine@[] mines(0);
class mine
{
string owner;
int z;
string map;
int x, y;
bool d=false;
timer lifetimer;
int pindex=-1;
mine(int mnx,int mny,int mnz, string mnmap, string mnowner)
{
owner=mnowner;
x=mnx;
y=mny;
z=mnz;
map=mnmap;
play("mineplace",x,y,z,map);
pindex=get_player_index_from(owner);
}
}
void mineloop()
{
for (uint i=0; i<mines.length(); i++)
{
if(mines[i].d==false)
{
for(uint v=0; v<vs.length(); v++)
{
if(vs[v].x==mines[i].x and vs[v].y==mines[i].y and vs[v].z==mines[i].z and vs[v].map==mines[i].map and vs[v].owner!=mines[i].owner)
{
if(are_teamed(mines[i].owner, vs[v].owner)) continue;
mines[i].d=true;
}
}
for(uint px=0; px<players.length(); px++)
{
if(in_vehicle(players[px].name)>-1 or players[px].newb==1 or players[px].is_dead or players[px].invinsible) continue;
if(players[px].x==mines[i].x and players[px].y==mines[i].y and players[px].z==mines[i].z and players[px].map==mines[i].map and mines[i].owner!=players[px].name&&!are_teamed(mines[i].owner,players[px].name))
{
mines[i].d=true;
}
}
}
if(mines[i].lifetimer.elapsed>=3600000&&mines[i].d==false) mines[i].d=true;
if(mines[i].d==true)
{
play("mineexplode",mines[i].x,mines[i].y,mines[i].z,mines[i].map);
play("minehit",mines[i].x,mines[i].y,mines[i].z,mines[i].map);
send_reliable(0,"distsound mineexplodedist "+mines[i].x+" "+mines[i].y+" "+mines[i].z+" "+mines[i].map,0);
for (uint i2=0; i2<players.length(); i2++)
{
if(players[i2].invinsible==true || players[i2].newb==1 || players[i2].is_dead==true||in_vehicle(players[i2].name)>-1) continue;
if (get_3d_distance(mines[i].x,mines[i].y,mines[i].z,players[i2].x,players[i2].y,players[i2].z)<=10 and players[i2].map==mines[i].map)
{
players[i2].hit(2000,5000);
players[i2].should_subtract=false;
players[i2].hitby=mines[i].owner+"'s mine";
play("hit"+random(1,3),players[i2].x,players[i2].y,players[i2].z,players[i2].map);
}
}
for (uint i2=0; i2<objs.length(); i2++)
{
if (get_3d_distance(mines[i].x,mines[i].y,mines[i].z,objs[i2].x,objs[i2].y,objs[i2].z)<=10 and objs[i2].map==mines[i].map)
{
play("obj_break"+random(1,3),objs[i2].x,objs[i2].y,objs[i2].z,objs[i2].map);
objs.remove_at(i2);
}
}
for (uint i2=0; i2<impact_bombs.length(); i2++)
{
if (get_3d_distance(mines[i].x,mines[i].y,mines[i].z,impact_bombs[i2].x,impact_bombs[i2].y,impact_bombs[i2].z)<=10 and impact_bombs[i2].map==mines[i].map)
{
impact_bombs[i2].health-=random(2000,5000);
play("ibombhit"+random(1, 3),impact_bombs[i2].x,impact_bombs[i2].y,impact_bombs[i2].z,impact_bombs[i2].map);
}
}
for (uint i2=0; i2<remguns.length(); i2++)
{
if (get_3d_distance(mines[i].x,mines[i].y,mines[i].z,remguns[i2].x,remguns[i2].y,remguns[i2].z)<=10 and remguns[i2].map==mines[i].map)
{
remguns[i2].health-=random(2000,5000);
remguns[i2].hitby=mines[i].owner+"'s mine";
play("remgunhit"+random(1, 3),remguns[i2].x,remguns[i2].y,remguns[i2].z,remguns[i2].map);
}
}
for(uint v=0; v<vs.length; v++)
{
if(get_3d_distance(mines[i].x,mines[i].y,mines[i].z,vs[v].x,vs[v].y,vs[v].z)<=10&&vs[v].map==mines[i].map)
vs[v].hit(random(2000,5000),mines[i].owner+"'s mine");
}
mines.remove_at(i);
continue;
}
}
}
void place_mine(int x,int y, int z, string map,string owner)
{
mine bomb1(x,y,z,map,owner);
mines.insert_last(bomb1);
}
void destroy_all_mines()
{
mines.resize(0);
}
int mines_at(int x, int y, int z, string map)
{
int here=0;
for(uint i=0; i<mines.length; i++)
{
if(mines[i].x==x and mines[i].y==y and mines[i].z==z and mines[i].map==map) here++;
}
return here;
}
void create_mine_from_datastream(string data)
{
dictionary d=deserialize(data);
int x=dget_int(d,"x"),y=dget_int(d,"y"),z=dget_int(d,"z");
string map=dget_string(d,"map"),owner=dget_string(d,"owner");
double lifetime=dget_double(d,"lifetime");
mine m1(x,y,z,map,owner);
m1.lifetimer.force(lifetime);
mines.insert_last(m1);
}
void create_mine_array_from_datastream(string stream)
{
dictionary@ temp=deserialize(stream);
string[] keys=temp.get_keys();
for(uint i=0; i<keys.length; i++)
{
string val=dget_string(temp,keys[i]);
create_mine_from_datastream(val);
}
@temp=null;
}
string[] create_datastream_from_mine(mine@ m)
{
dictionary d;
d.set("x",m.x);d.set("y",m.y);d.set("z",m.z);d.set("owner",m.owner);d.set("map",m.map);d.set("lifetime",m.lifetimer.elapsed);
string[] ret(2);
ret[0]=randomstring(5);
ret[1]=serialize(d);
return ret;
}
string create_datastream_from_mine_array()
{
dictionary d;
for(uint i=0; i<mines.length; i++)
{
string[] r=create_datastream_from_mine(mines[i]);
d.set(r[0],r[1]);
}
return serialize(d);
}